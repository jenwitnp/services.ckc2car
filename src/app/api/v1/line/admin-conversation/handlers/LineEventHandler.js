import { Client } from "@line/bot-sdk";
import { LineUtilsService } from "@/app/ai/adapters/line/services/LineUtilsService.js";
import { LineResponseBuilder } from "@/app/ai/adapters/line/helper/index.js";
import { AdminConversationService } from "../services/AdminConversationService.js";
import { ConfigService } from "../services/ConfigService.js";
import { ResponseProcessor } from "../services/ResponseProcessor.js";

export class LineEventHandler {
  constructor(config) {
    this.client = new Client(config);
  }

  /**
   * ✅ Handle LINE webhook event
   */
  async handleLineEvent(event) {
    try {
      if (event.type !== "message" || event.message.type !== "text") {
        return;
      }

      const { source, message, timestamp } = event;
      const lineUserId = source.userId;
      const messageContent = message.text;

      console.log("Processing LINE admin message:", {
        userId: lineUserId,
        messageLength: messageContent?.length,
        timestamp: timestamp,
      });

      // Get user profile and save user message
      const userInfo = await this.processUserMessage(
        lineUserId,
        messageContent,
        message,
        timestamp
      );

      // Get configuration and process response
      const adminConfig = await ConfigService.getAdminResponseConfig();
      console.log("Admin response config:", adminConfig);

      const adminResponse = await ResponseProcessor.processAdminResponse(
        messageContent,
        lineUserId,
        event,
        adminConfig
      );

      // Handle response or no-response
      if (adminResponse && adminResponse.shouldSend) {
        await this.handleSuccessfulResponse(
          adminResponse,
          adminConfig,
          userInfo,
          event
        );
      } else {
        await this.handleNoResponse(adminResponse, adminConfig, userInfo);
      }
    } catch (error) {
      console.error("Error handling LINE event:", error);
      await this.handleEmergencyFallback(event, error);
    }
  }

  /**
   * ✅ Process user message and get user info
   */
  async processUserMessage(lineUserId, messageContent, message, timestamp) {
    let lineUsername = null;
    try {
      const profile = await this.client.getProfile(lineUserId);
      const formattedProfile = LineUtilsService.formatUserProfile(profile);
      lineUsername = formattedProfile.displayName;
    } catch (error) {
      console.log("Could not get LINE profile:", error);
    }

    const conversationSessionId = LineUtilsService.generateSessionId(
      lineUserId,
      "admin"
    );

    const userMessageData = LineUtilsService.formatMessageForDatabase(
      {
        lineUserId: lineUserId,
        lineUsername: lineUsername,
        role: "user",
        content: messageContent,
        type: message.type,
        sessionId: conversationSessionId,
        metadata: {
          timestamp: new Date(timestamp).toISOString(),
          message_id: message.id,
          source_type: message.type,
          channel_type: "admin",
          event_type: "message",
        },
      },
      "customer"
    );

    await AdminConversationService.saveConversationMessage(userMessageData);

    return {
      lineUserId,
      lineUsername,
      conversationSessionId,
    };
  }

  /**
   * ✅ Handle successful response
   */
  async handleSuccessfulResponse(adminResponse, adminConfig, userInfo, event) {
    // Add configured delay
    if (adminConfig.autoResponseDelay > 0) {
      await new Promise((resolve) =>
        setTimeout(resolve, adminConfig.autoResponseDelay * 1000)
      );
    }

    // Format and save admin response
    const adminMessageData = LineUtilsService.formatMessageForDatabase(
      {
        lineUserId: userInfo.lineUserId,
        lineUsername: userInfo.lineUsername,
        role: "admin",
        content:
          adminResponse.text ||
          adminResponse.response?.text ||
          adminResponse.response?.altText ||
          "AI Response",
        type: "text",
        sessionId: userInfo.conversationSessionId,
        adminId: adminResponse.adminId,
        adminName: adminResponse.adminName,
        metadata: {
          response_timestamp: new Date().toISOString(),
          auto_generated: adminResponse.autoGenerated || false,
          response_mode: adminResponse.mode,
          confidence_score: adminResponse.confidenceScore,
          channel_type: "admin",
          response_type: adminResponse.response?.type,
        },
      },
      "admin"
    );

    await AdminConversationService.saveConversationMessage(adminMessageData);

    // Send LINE response
    console.log("Sending LINE response:", {
      type: adminResponse.response?.type,
      hasText: !!adminResponse.response?.text,
      hasContents: !!adminResponse.response?.contents,
    });

    await this.client.replyMessage(event.replyToken, adminResponse.response);
  }

  /**
   * ✅ Handle no response cases
   */
  async handleNoResponse(adminResponse, adminConfig, userInfo) {
    console.log("No automatic response sent:", {
      mode: adminConfig.mode,
      reason: adminResponse?.reason || "No response triggered",
      responseMode: adminResponse?.mode || "unknown",
      requiresManualResponse:
        adminResponse?.mode?.includes("manual") ||
        adminResponse?.mode?.includes("hybrid") ||
        adminResponse?.mode?.includes("auto_manual_required"),
    });

    if (
      adminResponse?.mode === "hybrid_manual_required" ||
      adminResponse?.mode === "auto_manual_required"
    ) {
      const systemMessage =
        adminResponse.mode === "auto_manual_required"
          ? `[AUTO MODE] No suitable template found - Manual admin response required`
          : `[HYBRID MODE] General query detected - Manual admin response required`;

      const systemLogData = LineUtilsService.formatMessageForDatabase(
        {
          lineUserId: userInfo.lineUserId,
          lineUsername: userInfo.lineUsername,
          role: "system",
          content: systemMessage,
          type: "system_log",
          sessionId: userInfo.conversationSessionId,
          adminId:
            adminResponse.mode === "auto_manual_required"
              ? "auto-system"
              : "hybrid-system",
          adminName:
            adminResponse.mode === "auto_manual_required"
              ? "Auto Mode System"
              : "Hybrid Mode System",
          metadata: {
            response_timestamp: new Date().toISOString(),
            auto_generated: false,
            response_mode: adminResponse.mode,
            channel_type: "admin",
            response_type: "no_response",
            query_type: adminResponse.queryType,
            requires_manual: true,
            template_analysis: adminResponse.templateAnalysis,
          },
        },
        "system"
      );

      await AdminConversationService.saveConversationMessage(systemLogData);
    }
  }

  /**
   * ✅ Emergency fallback handler
   */
  async handleEmergencyFallback(event, error) {
    try {
      const fallbackResponse = LineResponseBuilder.createErrorResponse(
        "ขออภัยครับ เกิดข้อผิดพลาดในระบบ กรุณาลองใหม่อีกครั้งครับ"
      );
      await this.client.replyMessage(event.replyToken, fallbackResponse);
    } catch (fallbackError) {
      console.error("Even fallback response failed:", fallbackError);
    }
  }
}
