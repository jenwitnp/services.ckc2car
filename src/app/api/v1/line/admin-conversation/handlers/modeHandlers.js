import {
  LineResponseBuilder,
  checkBusinessHours,
} from "@/app/ai/adapters/line/helper/index.js";
import { templateMatchingService } from "@/app/ai/adapters/line/templateMatching.js";
import { processLineRequest } from "@/app/ai/adapters/line";
import { ContextService } from "@/app/ai/services/context/ContextService.js";
import { isCarOrPriceRelated } from "@/app/ai/adapters/templateMatching/templateForUseAi";

const contextService = new ContextService();

export class ModeHandlers {
  /**
   * ✅ Handle business hours check
   */
  static handleBusinessHours(config) {
    if (!config.businessHours.enabled) {
      return null;
    }

    const isWithinHours = checkBusinessHours(config.businessHours);

    console.log("[Business Hours] Check result:", {
      isWithinHours,
      start: config.businessHours.start,
      end: config.businessHours.end,
      timezone: config.businessHours.timezone,
    });

    if (isWithinHours) {
      return {
        shouldSend: true,
        response: LineResponseBuilder.createBusinessHoursResponse(
          config.businessHours.afterHoursMessage,
          config.businessHours
        ),
        autoGenerated: true,
        mode: "business_hours",
        adminId: "business-hours-bot",
        adminName: "Business Hours Bot",
      };
    }

    return null;
  }

  /**
   * ✅ Handle manual mode
   */
  static handleManualMode(messageContent, config) {
    console.log(
      "[Admin Response] Manual mode - analyzing for template suggestions"
    );

    const templateAnalysis = templateMatchingService.analyzeMessage(
      messageContent,
      config.templates || {}
    );

    console.log("[Template Analysis] Results:", {
      bestMatch: templateAnalysis.bestMatch.type,
      confidence: templateAnalysis.bestMatch.confidence,
      score: templateAnalysis.bestMatch.score,
      shouldUseTemplate: templateAnalysis.suggestion.shouldUseTemplate,
    });

    if (
      templateAnalysis.bestMatch.confidence === "high" &&
      templateAnalysis.bestMatch.score > 0.6
    ) {
      console.log(
        "[Template Analysis] High confidence match - sending template response"
      );

      return {
        shouldSend: true,
        response: LineResponseBuilder.createTemplateResponse(
          templateAnalysis.bestMatch.template,
          templateAnalysis.bestMatch.type
        ),
        text: templateAnalysis.bestMatch.template,
        autoGenerated: true,
        mode: "manual_template",
        templateType: templateAnalysis.bestMatch.type,
        confidence: templateAnalysis.bestMatch.score,
        adminId: "template-bot",
        adminName: "Template Assistant",
      };
    }

    console.log(
      "[Template Analysis] Low/Medium confidence - manual admin response needed"
    );
    return { shouldSend: false };
  }

  /**
   * ✅ Handle auto mode
   */
  static handleAutoMode(messageContent, config) {
    console.log("[Admin Response] Auto mode - using template matching");

    const templateAnalysis = templateMatchingService.analyzeMessage(
      messageContent,
      config.templates || {}
    );

    console.log("[Auto Mode] Template analysis results:", {
      bestMatch: templateAnalysis.bestMatch.type,
      confidence: templateAnalysis.bestMatch.confidence,
      score: templateAnalysis.bestMatch.score,
      shouldUseTemplate: templateAnalysis.suggestion.shouldUseTemplate,
    });

    if (
      templateAnalysis.bestMatch.confidence !== "none" &&
      templateAnalysis.bestMatch.score > 0.3
    ) {
      console.log(
        "[Auto Mode] Good template match - Using template response:",
        templateAnalysis.bestMatch.type
      );

      return {
        shouldSend: true,
        response: LineResponseBuilder.createTemplateResponse(
          templateAnalysis.bestMatch.template,
          templateAnalysis.bestMatch.type
        ),
        text: templateAnalysis.bestMatch.template,
        autoGenerated: true,
        mode: "auto_template",
        templateType: templateAnalysis.bestMatch.type,
        confidence: templateAnalysis.bestMatch.score,
        adminId: "auto-template-bot",
        adminName: "Auto Template Bot",
      };
    } else {
      console.log(
        "[Auto Mode] No good template match - No auto response, waiting for manual admin response"
      );

      return {
        shouldSend: false,
        mode: "auto_manual_required",
        queryType: "no_template_match",
        reason: "No suitable template found, manual admin response required",
        templateAnalysis: {
          bestMatch: templateAnalysis.bestMatch.type,
          confidence: templateAnalysis.bestMatch.confidence,
          score: templateAnalysis.bestMatch.score,
        },
        adminId: null,
        adminName: null,
      };
    }
  }

  /**
   * ✅ Handle hybrid mode
   */
  static async handleHybridMode(messageContent, lineUserId, config) {
    try {
      console.log(
        "[Admin Response] Hybrid mode - analyzing message for AI vs No Response"
      );

      const shouldUseAI = isCarOrPriceRelated(messageContent);

      console.log("[Hybrid Mode] Message analysis:", {
        messagePreview: messageContent.substring(0, 50) + "...",
        shouldUseAI,
        useCase: shouldUseAI ? "AI_RESPONSE" : "NO_RESPONSE",
      });

      if (shouldUseAI) {
        return await this.handleHybridAIResponse(
          messageContent,
          lineUserId,
          config
        );
      } else {
        return this.handleHybridNoResponse();
      }
    } catch (hybridError) {
      console.error("[Hybrid Mode] Error:", hybridError);
      return this.handleHybridError(hybridError);
    }
  }

  /**
   * ✅ Handle AI mode
   */
  static async handleAIMode(messageContent, lineUserId, config) {
    try {
      console.log("[Admin Response] AI mode - processing with LINE adapter");

      const baseContext = await contextService.getUserContext(lineUserId);
      const context = {
        ...baseContext,
        userId: lineUserId,
        platform: "line",
        channel: "admin",
        isAdminChannel: true,
        adminConfig: config,
      };

      const aiResponse = await processLineRequest(messageContent, context);

      if (aiResponse) {
        if (!LineResponseBuilder.validateResponse(aiResponse)) {
          console.warn("[AI Mode] Invalid AI response, using fallback");
          throw new Error("Invalid AI response format");
        }

        let responseText = null;
        if (aiResponse.type === "text") {
          responseText = aiResponse.text;
        } else if (aiResponse.type === "flex") {
          responseText = aiResponse.altText || "Flex message response";
        }

        return {
          shouldSend: true,
          response: aiResponse,
          text: responseText,
          autoGenerated: true,
          mode: "ai_smart",
          confidenceScore: 0.9,
          adminId: "ai-assistant",
          adminName: "AI Assistant",
        };
      }
    } catch (aiError) {
      console.error("[AI Mode] Error:", aiError);
      return await this.handleAIFallback(messageContent, config, aiError);
    }
  }

  /**
   * ✅ Handle hybrid AI response
   */
  static async handleHybridAIResponse(messageContent, lineUserId, config) {
    console.log("[Hybrid Mode] Car/Price query detected - Using AI response");

    const baseContext = await contextService.getUserContext(lineUserId);
    const context = {
      ...baseContext,
      userId: lineUserId,
      platform: "line",
      channel: "admin",
      isAdminChannel: true,
      hybridMode: true,
      queryType: "car_price_inquiry",
      adminConfig: config,
    };

    const aiResponse = await processLineRequest(messageContent, context);

    if (aiResponse) {
      if (!LineResponseBuilder.validateResponse(aiResponse)) {
        console.warn(
          "[Hybrid Mode] Invalid AI response, no fallback in hybrid mode"
        );
        throw new Error("Invalid AI response format");
      }

      let responseText = null;
      if (aiResponse.type === "text") {
        responseText = aiResponse.text;
      } else if (aiResponse.type === "flex") {
        responseText = aiResponse.altText || "Flex message response";
      }

      return {
        shouldSend: true,
        response: aiResponse,
        text: responseText,
        autoGenerated: true,
        mode: "hybrid_ai",
        confidenceScore: 0.9,
        queryType: "car_price_inquiry",
        adminId: "hybrid-ai-assistant",
        adminName: "Hybrid AI Assistant",
      };
    } else {
      console.warn(
        "[Hybrid Mode] AI returned no response, hybrid mode will not respond"
      );
      throw new Error("AI response is null");
    }
  }

  /**
   * ✅ Handle hybrid no response
   */
  static handleHybridNoResponse() {
    console.log(
      "[Hybrid Mode] General query detected - No auto response, waiting for manual admin response"
    );

    return {
      shouldSend: false,
      mode: "hybrid_manual_required",
      queryType: "general_inquiry",
      reason: "Non-car/price query requires manual admin response",
      adminId: null,
      adminName: null,
    };
  }

  /**
   * ✅ Handle hybrid error
   */
  static handleHybridError(hybridError) {
    console.log(
      "[Hybrid Mode] AI error occurred - No fallback response in hybrid mode"
    );

    return {
      shouldSend: false,
      mode: "hybrid_ai_error",
      error: hybridError.message,
      reason: "AI error in hybrid mode, manual admin response required",
      adminId: null,
      adminName: null,
    };
  }

  /**
   * ✅ Handle AI fallback
   */
  static async handleAIFallback(messageContent, config, aiError) {
    console.log("[AI Mode] Falling back to template matching due to AI error");

    const templateAnalysis = templateMatchingService.analyzeMessage(
      messageContent,
      config.templates || {}
    );

    if (templateAnalysis.bestMatch.confidence !== "none") {
      return {
        shouldSend: true,
        response: LineResponseBuilder.createTemplateResponse(
          templateAnalysis.bestMatch.template,
          templateAnalysis.bestMatch.type
        ),
        text: templateAnalysis.bestMatch.template,
        autoGenerated: true,
        mode: "ai_fallback_template",
        templateType: templateAnalysis.bestMatch.type,
        adminId: "ai-fallback-bot",
        adminName: "AI Fallback Bot",
      };
    }

    // Ultimate fallback
    const defaultText =
      "สวัสดีครับ ขอบคุณที่ติดต่อเรา ทีมงานจะติดต่อกลับไปในเร็วๆ นี้นะครับ";
    return {
      shouldSend: true,
      response: LineResponseBuilder.createTextResponse(defaultText),
      text: defaultText,
      autoGenerated: true,
      mode: "ai_ultimate_fallback",
      error: aiError.message,
      adminId: "ai-ultimate-fallback-bot",
      adminName: "AI Ultimate Fallback Bot",
    };
  }

  /**
   * ✅ Get fallback response
   */
  static getFallbackResponse() {
    const defaultText =
      "สวัสดีครับ ขอบคุณที่ติดต่อเรา ทีมงานจะติดต่อกลับไปในเร็วๆ นี้นะครับ";
    return {
      shouldSend: true,
      response: LineResponseBuilder.createTextResponse(defaultText),
      text: defaultText,
      autoGenerated: true,
      mode: "fallback",
      adminId: "fallback-bot",
      adminName: "Fallback Bot",
    };
  }
}
